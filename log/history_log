ls
printf("%s", hello)
printf %s hello)
printf %s hello
printf hello
printf hello\n
exit
    env lalala
    env | grep OLDPWD
    export aaa1=cat aaa2=dog
    env | grep aaa
    export | grep aaa
    export aaaa
    export aaaa=hamster
    export | grep aaaa
    export 1var;
    export "" test1=dog
    export test2=$HOME
    echo $test2
    export ls="ls -l"
    $ls
    env ls
    env -a ls
    $SHVL
    eCho
    env | grep DOESNT_EXIST
    env | grep HOME
    env | grep USER
    env | wc -l
    env what
    pwd
    "pwd"
    pwd test42
    pwd 42 42 42
    pwd pwd
    pwd pwd pwd
    /bin/echo $HOME
    /bin/echo
    /bin/echo 1
    /bin/cat 42
    /bin/echo hello 42
    /bin/sleep 0
    /bin/echo -n 1
    echo
    echo hello world
    /bin/echo 42
    echo $?
    /bin/cat 42
    echo $?
    /bin/exe42 42
    42 42
    /bin/echo 42
    expr $? + $?
    /bin/cat 42
    expr $? + $?
    echo "Hello World"
    echo "  ""Hello World"
    echo "  "Hello "World "
    "echo" 42
    "echo 42"
    echo " cat ' lol.c"
    /bin/echo @World"42"Hello
    echo 'Hello World'
    echo '  ' Hello World
    echo '  'Hello 'World '
    'echo' 42
    'e'cho 42
    echo 'cat lol.c << cat > lol.c'
    echo @World'42'Hello
    echo "" ''
    echo """"''""''""
    echo " "" " ' ' " " ' ' " "
    echo 1 '|' echo 2
    echo 1 '&&' echo 2
    echo 1 '||' echo 2
    echo 1 '>' echo 2
    echo 1 '>>' file 2
    '<<' lim echo 1 >>/dev/null
    echo "$USER"
    echo "   $   "
    echo '$USER'
    echo '   $   '
    echo "$HO ME"
    echo '$HO ME'
    echo $"HOME"
    echo $'HOME'
    echo ""$PWD""
    echo ''$PWD''
    echo $USE"R"$HOME
    echo $"HOME"$USER
    echo $"HOM"E$USER
    echo $"'HOM'E"$USER
    echo $'HOM'E$USER
    echo $"HOME"
    echo $'HOME'
    echo $
    echo "$"
    echo '$='
    echo "$""$"
    echo $"$"
    echo $"42$"
    echo "$"$
    echo $'$'
    echo '$'$
    cd /bin/
    sleep 2
    mkdir tmp_path_test1 tmp_path_test2
    printf '#include <unistd.h>\nint main(){write(1, \"1\\n\", 2);}' > tmp_path_test1/test1.c
    gcc tmp_path_test1/test1.c -o tmp_path_test1/a.out
    printf '#include <unistd.h>\nint main(){write(1, \"2\\n\", 2);}' > tmp_path_test2/test2.c
    gcc tmp_path_test2/test2.c -o tmp_path_test2/a.out
    export PATH=tmp_path_test1:tmp_path_test2
    a.out
    export PATH=tmp_path_test2:tmp_path_test1
    a.out
    /bin/rm -rf tmp_path_test1 tmp_path_test2
    unset PATH
    echo $PATH
    /bin/ls
    echo 1
    cd -
    echo 42
    unset PATH
    echo 42
    unset PATH
    unset PATH
    unset PATH
    echo $PATH
    echo 1
    echo 42
    export PATH=""
    echo $PATH
    echo 1
    cd -
    cd .
    cd ~
    cd ~/Desktop/
    pwd
    export PATH=
    echo $PATH
    echo 1
    export PATH=1
    echo $PATH
    echo 1
    cd /bin/
    ls
    touch tmp_x_file1
    tmp_x_file1
    echo $?
    ./tmp_x_file1
    echo $?
    export PATH=$HOME
    echo $PATH
    echo 42
    /bin/rm -f tmp_x_file1
    cd doesntexist
    export PATH=""
    ls
    env lalala
    env | grep OLDPWD
    export aaa1=cat aaa2=dog
    env | grep aaa
    export | grep aaa
    export aaaa
    export aaaa=hamster
    export | grep aaaa
    export 1var;
    export "" test1=dog
    export test2=$HOME
    echo $test2
    export ls="ls -l"
    $ls
    env ls
    env -a ls
    $SHVL
    eCho
    env | grep DOESNT_EXIST
    env | grep HOME
    env | grep USER
    env | wc -l
    env what
    pwd
    "pwd"
    pwd test42
    pwd 42 42 42
    pwd pwd
    pwd pwd pwd
    /bin/echo $HOME
    /bin/echo
    /bin/echo 1
    /bin/cat 42
    /bin/echo hello 42
    /bin/sleep 0
    /bin/echo -n 1
    echo
    echo hello world
    /bin/echo 42
    echo $?
    /bin/cat 42
    echo $?
    /bin/exe42 42
    42 42
    /bin/echo 42
    expr $? + $?
    /bin/cat 42
    expr $? + $?
    echo "Hello World"
    echo "  ""Hello World"
    echo "  "Hello "World "
    "echo" 42
    "echo 42"
    echo " cat ' lol.c"
    /bin/echo @World"42"Hello
    echo 'Hello World'
    echo '  ' Hello World
    echo '  'Hello 'World '
    'echo' 42
    'e'cho 42
    echo 'cat lol.c << cat > lol.c'
    echo @World'42'Hello
    echo "" ''
    echo """"''""''""
    echo " "" " ' ' " " ' ' " "
    echo 1 '|' echo 2
    echo 1 '&&' echo 2
    echo 1 '||' echo 2
    echo 1 '>' echo 2
    echo 1 '>>' file 2
    '<<' lim echo 1 >>/dev/null
    echo "$USER"
    echo "   $   "
    echo '$USER'
    echo '   $   '
    echo "$HO ME"
    echo '$HO ME'
    echo $"HOME"
    echo $'HOME'
    echo ""$PWD""
    echo ''$PWD''
    echo $USE"R"$HOME
    echo $"HOME"$USER
    echo $"HOM"E$USER
    echo $"'HOM'E"$USER
    echo $'HOM'E$USER
    echo $"HOME"
    echo $'HOME'
    echo $
    echo "$"
    echo '$='
    echo "$""$"
    echo $"$"
    echo $"42$"
    echo "$"$
    echo $'$'
    echo '$'$
    cd /bin/
    sleep 2
    mkdir tmp_path_test1 tmp_path_test2
    printf '#include <unistd.h>\nint main(){write(1, \"1\\n\", 2);}' > tmp_path_test1/test1.c
    gcc tmp_path_test1/test1.c -o tmp_path_test1/a.out
    printf '#include <unistd.h>\nint main(){write(1, \"2\\n\", 2);}' > tmp_path_test2/test2.c
    gcc tmp_path_test2/test2.c -o tmp_path_test2/a.out
    export PATH=tmp_path_test1:tmp_path_test2
    a.out
    export PATH=tmp_path_test2:tmp_path_test1
    a.out
    /bin/rm -rf tmp_path_test1 tmp_path_test2
    unset PATH
    echo $PATH
    /bin/ls
    echo 1
    cd -
    echo 42
    unset PATH
    echo 42
    unset PATH
    unset PATH
    unset PATH
    echo $PATH
    echo 1
    echo 42
    export PATH=""
    echo $PATH
    echo 1
    cd -
    cd .
    cd ~
    cd ~/Desktop/
    pwd
    export PATH=
    echo $PATH
    echo 1
    export PATH=1
    echo $PATH
    echo 1
    cd /bin/
    ls
    touch tmp_x_file1
    tmp_x_file1
    echo $?
    ./tmp_x_file1
    echo $?
    export PATH=$HOME
    echo $PATH
    echo 42
    /bin/rm -f tmp_x_file1
    cd doesntexist
    export PATH=""
    ls
    exit
    exit 0
    exit 1
    exit 42
    exit 256
    exit 300
    exit 9223372036854775805
    exit -0
    exit -1
    exit -42
    exit -256
    exit -300
    exit -9223372036854775805
    exit +1
    exit ++1
    exit ++12560
    exit --1
    exit --12560
    exit 0 0
    exit 1 2
    exit 1 2 3
    exit 01
    exit 001
    exit 0001
    exit +++000
    exit ++++000
    exit ++++42424242
    exit ---000
    exit ----000
    exit 42 42 42 42 42
    exit something
    exit  2 3
    exit 42 A
    exit 42-A
    exit 42 something
    exit "+100"
    exit "-100"
    exit ""
    exit "something"
    exit something somethingv2
    exit +++++
    exit -----
    exit -42-
    exit +42+
    exit +
    exit -
    exit "+++"
    exit "---"
    exit echo
    exit cd ..
    exit exit
    exit
    exit 0
    exit 1
    exit 42
    exit 256
    exit 300
    exit 9223372036854775805
    exit -0
    exit -1
    exit -42
    exit -256
    exit -300
    exit -9223372036854775805
    exit +1
    exit ++1
    exit ++12560
    exit --1
    exit --12560
    exit 0 0
    exit 1 2
    exit 1 2 3
    exit 01
    exit 001
    exit 0001
    exit +++000
    exit ++++000
    exit ++++42424242
    exit ---000
    exit ----000
    exit 42 42 42 42 42
    exit something
    exit  2 3
    exit 42 A
    exit 42-A
    exit 42 something
    exit "+100"
    exit "-100"
    exit ""
    exit "something"
    exit something somethingv2
    exit +++++
    exit -----
    exit -42-
    exit +42+
    exit +
    exit -
    exit "+++"
    exit "---"
    exit echo
    exit cd ..
    exit exit
    exit 42-
minishell
./minishell
exit
exit
cd src
cd..
 cd ..
pwd
cd minishell/
pwd
/Users/cwesseli/Personal_git/minishell
/Users/cwesseli/Personal_git/minishell/minishel
/Users/cwesseli/Personal_git/minishell/minishell
exit
    env lalala
    env | grep OLDPWD
    export aaa1=cat aaa2=dog
    env | grep aaa
    export | grep aaa
    export aaaa
    export aaaa=hamster
    export | grep aaaa
    export 1var;
    export "" test1=dog
    export test2=$HOME
    echo $test2
    export ls="ls -l"
    $ls
    env ls
    env -a ls
    $SHVL
    eCho
    env | grep DOESNT_EXIST
    env | grep HOME
    env | grep USER
    env | wc -l
    env what
    pwd
    "pwd"
    pwd test42
    pwd 42 42 42
    pwd pwd
    pwd pwd pwd
    /bin/echo $HOME
    /bin/echo
    /bin/echo 1
    /bin/cat 42
    /bin/echo hello 42
    /bin/sleep 0
    /bin/echo -n 1
    echo
    echo hello world
    /bin/echo 42
    echo $?
    /bin/cat 42
    echo $?
    /bin/exe42 42
    42 42
    /bin/echo 42
    expr $? + $?
    /bin/cat 42
    expr $? + $?
    echo "Hello World"
    echo "  ""Hello World"
    echo "  "Hello "World "
    "echo" 42
    "echo 42"
    echo " cat ' lol.c"
    /bin/echo @World"42"Hello
    echo 'Hello World'
    echo '  ' Hello World
    echo '  'Hello 'World '
    'echo' 42
    'e'cho 42
    echo 'cat lol.c << cat > lol.c'
    echo @World'42'Hello
    echo "" ''
    echo """"''""''""
    echo " "" " ' ' " " ' ' " "
    echo 1 '|' echo 2
    echo 1 '&&' echo 2
    echo 1 '||' echo 2
    echo 1 '>' echo 2
    echo 1 '>>' file 2
    '<<' lim echo 1 >>/dev/null
    echo "$USER"
    echo "   $   "
    echo '$USER'
    echo '   $   '
    echo "$HO ME"
    echo '$HO ME'
    echo $"HOME"
    echo $'HOME'
    echo ""$PWD""
    echo ''$PWD''
    echo $USE"R"$HOME
    echo $"HOME"$USER
    echo $"HOM"E$USER
    echo $"'HOM'E"$USER
    echo $'HOM'E$USER
    echo $"HOME"
    echo $'HOME'
    echo $
    echo "$"
    echo '$='
    echo "$""$"
    echo $"$"
    echo $"42$"
    echo "$"$
    echo $'$'
    echo '$'$
    cd /bin/
    sleep 2
    mkdir tmp_path_test1 tmp_path_test2
    printf '#include <unistd.h>\nint main(){write(1, \"1\\n\", 2);}' > tmp_path_test1/test1.c
    gcc tmp_path_test1/test1.c -o tmp_path_test1/a.out
    printf '#include <unistd.h>\nint main(){write(1, \"2\\n\", 2);}' > tmp_path_test2/test2.c
    gcc tmp_path_test2/test2.c -o tmp_path_test2/a.out
    export PATH=tmp_path_test1:tmp_path_test2
    a.out
    export PATH=tmp_path_test2:tmp_path_test1
    a.out
    /bin/rm -rf tmp_path_test1 tmp_path_test2
    unset PATH
    echo $PATH
    /bin/ls
    echo 1
    cd -
    echo 42
    unset PATH
    echo 42
    unset PATH
    unset PATH
    unset PATH
    echo $PATH
    echo 1
    echo 42
    export PATH=""
    echo $PATH
    echo 1
    cd -
    cd .
    cd ~
    cd ~/Desktop/
    pwd
    export PATH=
    echo $PATH
    echo 1
    export PATH=1
    echo $PATH
    echo 1
    cd /bin/
    ls
    touch tmp_x_file1
    tmp_x_file1
    echo $?
    ./tmp_x_file1
    echo $?
    export PATH=$HOME
    echo $PATH
    echo 42
    /bin/rm -f tmp_x_file1
    cd doesntexist
    export PATH=""
    ls
printf '#include <unistd.h>
int main(){write(1, "1\n", 2);}' > tmp_path_test1/test1.c
echo$?
printf '#include <unistd.h>
int main(){write(1, "1\n", 2);}' > tmp_path_test1/test1.c
echo $?
exit
ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls
ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls
ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls
exit
ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls
exit
ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls | ls
