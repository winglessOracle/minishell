_HiStOrY_V2_
"hello\040'world\040out\040there"
"hello\040'world\040"out"\040there"
hello\040world\040'does\040|\040this\040work?'\040hello=10\040$var\040word\040|\040word\040"#comment\040gone"\040|\040with\040$var\040and\040#comment\040that\040will\040be\040gone
<\040input\040for\040command\0401\040|\040<<\040here\040for\040heredoc\040>\040out\040|\040>>\040append\040the\040last
<\040input\040for\040command\0401\040|\040<<\040here\040for\040heredoc\040>\040out\040|\040>>\040append\040the\040last
<\040input\040for\040command\0401\040|\040<<\040here\040for\040heredoc\040>\040out\040|\040>>\040append\040t
"hello\040there"\040and\040#comment
<\040input\040for\040command\0401\040|\040<<\040here\040for\040heredoc\040>\040out\040|\040>>\040append\04"
<\040input\040for\040command\0401\040|\040<<\040here\040for\040heredoc\040>\040out\040|\040>>\040append\04"
<\040input\040for\040command\0401\040|\040<<\040here\040for\040heredoc\040>\040out\040|\040>>\040append\04"
"hello world" #comment
<\040input\040for\040command\0401\040|\040<<\040here\040for\040heredoc\040>\040out\040|\040>>\040append\04"
<\040input\040for\040command\0401\040|\040<<\040here\040for\040heredoc\040>\040out\040|\040>>\040append\04"
"hello world"
"hello world"
#comment
#comment
< input for command 1 | << here for heredoc > out | >> append the last
"hello world"
#comment
< input for command 1 | << here for heredoc > out | >> append the last
"hello world"
"hello world"
"hello world"
"hello world"
"hello world"
"hello "there"world"
"hello "there"world"
hello world 'does | this work?' hello=10 $var word | word "#comment gone" | with $var and #comment that will be gone
	// printf("delete: %s\n", temp);
hello world 'does | this work?' hello=10 $var word | word "#comment gone" | with $var and #comment that will be gone
	// printf("delete: %s\n", temp);
hello world 'does | this work?' hello=10 $var word | word "#comment gone" | with $var and #comment that will be gone
hello world 'does | this work?' hello=10 $var word | word "#comment gone" | with $var and #comment
hello world 'does | this work?' hello=10 $var word | word "#comment gone" | with $var and #comment
#
#comment
hello world 'does | this work?' hello=10 $var word | word "#comment not gone" | with $var and #comment that will be gone
hello world 'does | this work?' hello=10 $var word | word "#comment not gone" | with $var and #comment that will be gone
exi
hello world 'does | this work?' hello=10 $var word | word "#comment not gone" | with $var and #comment that will be gone
hello world 'does | this work?' hello=10 $var word | word "#comment not gone" | with $var and #comment that will be gone
exi
hello world 'does | this work?' hello=10 $var word | word "#comment not gone" | with $var and #comment that will be gone
hello world 'does | this work?' hello=10 $var word | word "#comment not gone" | with $var and #comment that will be gone
hello world 'does | this work?' hello=10 $var word | word "#comment not gone" | with $var and #comment that will be gone
hello world 'does | this work?' hello=10 $var word | word "#comment not gone" | with $var and #comment that will be gone
hello world 'does | this work?' hello=10 $var word | word "#comment not gone" | with $var and #comment that will be gone
hello world 'does | this work?' hello=10 $var word | word "#comment not gone" | with $var and #comment that will be gone
hello world 'does | this work?' hello=10 $var word | word "#comment not gone" | with $var and #comment that will be gone
		if (!(tokens->type == WORD || tokens->type == NAME))
hello world 'does | this work?' hello=10 $var word | word "#comment not gone" | with $var and #comment that will be gone
hello world 'does | this work?' hello=10 $var word | word "#comment not gone" | with $var and #comment that will be gone
hello world 'does | this work?' hello=10 $var word | word "#comment not gone" | with $var and #comment that will be gone
hello world 'does | this work?' hello=10 $var word | word "#comment not gone" | with $var and #comment that will be gone
hello world 'does | this work?' hello=10 $var word | word "#comment not gone" | with $var and #comment that will be gone
hello world 'does | this work?' hello=10 $var word | word "#comment not gone" | with $var and #comment that will be gone
hello world 'does | this work?' hello=10 $var word | word "#comment not gone" | with $var and #comment that will be gone
hello world 'does | this work?' hello=10 $var word | word "#comment not gone" | with $var and #comment that will be gone
hello world 'does | this work?' hello=10 $var word | word "#comment not gone" | with $var and #comment that will be gone
hello world 'does | this work?' hello=10 $var word | word "#comment not gone" | with $var and #comment that will be gone
hello world 'does | this work?' hello=10 $var word | word "#comment not gone" | with $var and #comment that will be gone
hello world 'does | this work?' hello=10 $var word | word "#comment not gone" | with $var and #comment that will be gone
hello world 'does | this work?' hello=10 $var word | word "#comment not gone" | with $var and #comment that will be gone
eit
hello world 'does | this work?' hello=10 $var word | word "#comment not gone" | with $var and #comment that will be gone
hello world 'does | this work?' hello=10 $var word | word "#comment not gone" | with $var and #comment that will be gone
int	redirect(t_node **tokens, t_smpl_cmd *cmd)
{
	printf("REDIRECT\n");
}
hello world 'does | this work?' hello=10 $var word | word "#comment not gone" | with $var and #comment that will be gone
hello world 'does | this work?' hello=10 $var word | word "#comment not gone" | with $var and #comment that will be gone
hello world 'does | this work?' hello=10 $var word | word "#comment not gone" | with $var and #comment that will be gone
hello world 'does | this work?' hello=10 $var word | word "#comment not gone" | with $var and #comment that wi< inputll be gone
hello world 'does | this work?' hello=10 $var word | word "#comment not gone" | with $var and #comment that will be gone
hello world 'does | this work?' hello=10 $var word | word "#comment not gone" | with $var and #comment that will be gone
>input
hello world 'does | this work?' hello=10 $var word | word "#comment not gone" | with $var and #comment that will be gone
>input
hello world 'does | this work?' hello=10 $var word | word "#comment not gone" | with $var and #comment that will be gone
hello world 'does | this work?' hello=10 $var word | word "#comment not gone" | with $var and #comment that will be gone
hello world 'does | this work?' hello=10 $var word | word "#comment not gone" | with $var and #comment that will be gone
hello world 'does | this work?' hello=10 $var word | word "#comment not gone" | with $var and #comment that will be gone
		tokens = tokens->next;
hello world 'does | this work?' hello=10 $var word | word "#comment not gone" | with $var and #comment that will be gone
set_cmd_end
hello world 'does | this work?' hello=10 $var word | word "#comment not gone" | with $var and #comment that will be gone
hellow || h osgh aogp
hello world 'does | this work?' hello=10 $var word | word "#comment not gone" | with $var and #comment that will be gone
hello world 'does | this work?' hello=10 $var word | word "#comment not gone" | with $var and #comment that will be gone
hello world 'does | this work?' hello=10 $var word | word "#comment not gone" | with $var and #comment that will be gone
hello
""
hello world 'does | this work?' hello=10 $var word | word "#comment not gone" | with $var and #comment that will be gone
hello world 'does | this work?' hello=10 $var word | word "#comment not gone" | with $var and #comment that will be gone
hello world 'does | this work?' hello=10 $var word | word "#comment not gone" | with $var and #comment that will be gone
	MAX_LEXTYPE,
hello world 'does | this work?' hello=10 $var word | word "#comment not gone" | with $var and #comment that will be gone
hello 'and quote'
hello 'and quote'
hello 'and quote'
hello 'and quote'
hello 'and quote'
hello 'and quote'
hello 'and quote'
hello world 'does | this work?' hello=10 $var word | word "#comment not gone" | with $var and #comment that will be gone
lkjg lsgj 'losgj sgj 
lkjg lsgj 'losgj sgj 
lkjg lsgj 'losgj sgj 
exjt
lkjg lsgj 'losgj sgj 
'hello world'
hello world 'does | this work?' hello=10 $var word | word "#comment not gone" | with $var and #comment that will be gone
'ihg wiogh og 
hello world 'does | this work?' hello=10 $var word | word "#comment not gone" | with $var and #comment that will be gone
"hello world"
"hello world"
"hello $world"
"hello =world"
hello world 'does | this work?' hello=10 $var word | word "#comment not gone" | with $var and #comment that will be gone
"hello world"
'hello world'
"'hello world'"
'"hello world"'
"hello"
'hello'
'"hello"'
"'hello'"
""hello""
"hello"
'hello'
"hello"
'hello'
hello world 'does | this work?' hello=10 $var word | word "#comment not gone" | with $var and #comment that will be gone
hello world 'does | this work?' hello=10 $var word | word "#comment not gone" | with $var and #comment that will be gone
"hello"
hello
$PS1
$PWD
$PWD
$PS1
$PS1
$PS1
$PS1 test
"$PS1 test"
"$PS1 test"
"$PS1 test"
test$PS1
test$PS1
"test$PS1 "
"test$PS1 test"
"test$PS1 test"
$PS1
$PS1
"hello world"
'hello world'
"hello world"
"hello world"
"hello $PS1 world"
"hello $PWD world"
"hello $PWD world"
'hello $PWD world'
hello world how are yout
'hello $PWD world'
'hello $PWD world'
hello world 'does | this work?'
hello=10 $var word
hello=10 $var word | word "#comment not gone"
 hello=10 $var word | word 
 word "#comment not gone"
 word "#comment not gone"
 word "#comment not gone"
EXIT
 word "#comment not gone"
 word "#comment not gone"
 word "#comment not gone"
 word "#comment not gone"
 word "#comment $not gone"
 word "comment $not gone"
 word "comment $not gone"
 word "comment not gone"
 "$PWD"
 "test$PWD"
 "test $PWD"
 "$PWD$PWD"
 $ PWD
 $ PWD
EXIT
 $ PWD
hello world 'does | this work?' hello=10 $var word | word "#comment not gone" | with $var and #comment that will be gone
hello world 'does | this work?' hello=10 $var word | word "#comment not gonPWD| with $var and #comment that will be gone
hello world 'does | this work?' hello=10 $var word | word "#comment not gonPWD| with $var and #comment that will be gone
hello world 'does | this work?' hello=10 $var word | word "#comment not gonPWD| with $var and #comment that will be gone
hello world 'does | this work?' hello=10 $var word | word "#comme" not gonPWD| with $var and #comment that will be gone
hello world 'does | this work?' hello=10 $var word | word "#comme" not gonPWD| with $var and #comment that will be gone
 word "#comment not gone" | with $PWD and #comment that will be gone
hello world 'does | this work?' hello=10 $var word | word "#comment not gone" | with $PWD and #comment that will be gone
$PS1
$PS1
hello world 'does | this work?' hello=10 $var word | word "#comment not gone" | with $PWD and #comment that will be gone
CC|$HELL
CC|$HELL
$aap
CC|$HELL
"CC|$HELL"
"CC|$HELL"
"CC|$HELL"
$PS1
hello world 'does | this work?' hello=10 $var word | word "#comment not gone" | with $PWD and #comment that will be gone
hello world 'does | this work?' hello=10 $var word | word "#comment not gone" | with $PS1 and #comment that will be gone
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone
command | another $command |
| followed by command
|
#comment
< input for command 1 | << here for heredoc > out | >> append the last
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone
command | another $command |
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone
command | another $command |
command | another $command |
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone
command | another $command |
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone
	// BRACE_O,
	// BRACE_C,	
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone
hello world
 
 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone
command | another $command |
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone
command | another $command |
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone
command | another $command |
| followed by command
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone
command | another $command |
| followed by command
|
hello world
|
| ls ls l s
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone
command | another $command |
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone
command | another $command |
| followed by command
make fclean
make
| followed by command
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone
command | another $command |
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone
command | another $command |
| followed by command
| followed by command
command | another $command |
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone
command | another $command |
| followed by command
command | another $command |
command | another $command |
command | another $command |
command | another $command |
command | another $command |
command | another $command |
command | another $command |
command | another $command |
		if (pipeline)
command | another $command |
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone
command | another $command |
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone
command | another $command |
| followed by command
|
#comment
< input for command 1 | << here for heredoc > out | >> append the last
hello world
< input for command 1 | << here for heredoc > out | >> append the last
<input
<input for
<input for
<input for
<input for
<input for
<input for
<input for
ecit
<input for
<input for
<input for
< input for command 1 | << here for heredoc > out | >> append the last
< input for command 1 | << here for heredoc > out | >> append the last
<
<
< input for command 1 | << here for heredoc > out | >> append the last
< input for command 1 | << here for heredoc > out | >> append the last
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone
hello worl
PS2=aa
hello PS2=aa
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone
command | another $command |
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone
| followed by command
command | another $command |
|
#comment
< input for command 1 | << here for heredoc > out | >> append the last
command | another $command |
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone
| followed by command
|
#comment
< input for command 1 | << here for heredoc > out | >> append the last
#comment
< input for command 1 | << here for heredoc > out | >> append the last
< input for command 1 | << here for heredoc > out | >> append the last
< "input $PS1"  for command 1 | << "here $PWD" for heredoc > out | >> append the last
"hello $PS1"
"hello       $PS1"
"hello world"
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone
| followed by command
|
#comment
< input for command 1 | << here for heredoc > out | >> append the last
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "input with var $PS1" for command 1
< "input with var $PS1" for command 1
< "input with var $PS1" for command 1
< "input with var $PS1" for command 1
< "input with var $PS1" for command 1
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< $var << $var < "$var" < '$var' << "$var" << '$var'
< $var < "$var" < '$var' << $var << "$var" << '$var'
< $var
< "$var"
< '$var'
<< $var
<< "$var"
<< "$var"
<< "$var"
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
 << "here with var $PWD"
 << "$PWD"
 << "here with var $PWD"
 << "$PWD"
 << "here with var $PWD"
 < "here with var $PWD"
 << "$PWD"
 << "$PWD"
 < "here with var $PWD"
 << "$PWD"
 < "here with var $PWD"
 << "$PWD"
 < "here with var $PWD"
 < "here with var $PWD"
 < "here with var $PWD"
 < "here with var $PWD"
 < "here with var $PWD"
 << "$PWD"
 << "$PWD"
 < "here with var $PWD"
 < "here with var $PWD"
 << "here with var $PWD"
 << "$PWD"
 << $PWD
< $var < "$var" < '$var' << $var << "$var" << '$var'
< $var
< "$var"
< '$var'
<< $var
<< "$var"
<< '$var'
<>
<>
<>
<>
" hks sg dkgh k
" hks sg dkgh k
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
#comment
< input for command 1 | << here for heredoc > out | >> append the last
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
#comment
< input for command 1 | << here for heredoc > out | >> append the last
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
"hello expand this $PS1"
"hello expand this $PS1"
"hello expand this $PS1"
"hello expand this $ PS1"
$PWD
$ PWD
$PWD
$ PWD
$ PWD
$ PWD
$var
'$var'
< $var
< '$var'
< "$var"
<< $var
<< '$var'
<< "$var"
< 'var'
< '$var'
< "$var"
<< '$var'
<< "$var"
<< $var
< '$var'
$var
'$var'
"$var"
$var
'$var'
'hello world'
'hello $var world'
'$var'
<< '$var'
<input
< input
< input
< input here
< $var < "$var" < '$var' << $var << "$var" << '$var'
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone
| followed by command
| followed by command
|
#comment
< input for command 1 | << here for heredoc > out | >> append the last
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
			*pipeline = NULL;
| followed by command
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
#comment
< input for command 1 | << here for heredoc > out | >> append the last
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
#comment
< input for command 1 | << here for heredoc > out | >> append the last
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
$PWD
$PWD
$PWD
"$PWD and something"
"$PWD and something"
"$aap and something"
"$PWD and something"
"$aap and something"
"$PWD and something"
"$aap and something"
"$PWD and something"
$PWD
$VAR
$VAR
$VAR
$VAR
$VAR
$VAR
$VAR
$ANOTHER
$VAR
$VAR
make
$VAR
$VAR
$VAR
$VAR
$VAR
$VAR
$VAR
$VAR
$VAR
$VAR
$2VAR
$VAR
$VAR
$2VAR
$VAR
$VAR aap
$VAR
$VAR
$VAR aap
$VAR aap
$VAR
$VAR aap
$VAR
$VAR aap
$VAR
$VAR aap
$VAR
$2VAR
$2VAR
$VAR
$VAR aap
$VAR
$2VAR
$VAR aap
$VAR aap
$VAR aap
$2VAR
$VAR
$VAR
$VAR aap
$2VAR aap
#comment
<< 'hello $PS1 world'
< 'hello $PS1 world'
< "hello $PS1 world"
<< "hello $PS1 world"
$
"$ app"
l$VAR
hello world 'does | this work?' hello=10 word | word "#comment not gone" | with and #comment that will be gone
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone
$ PWD 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone
$ PWD 
$ PWD 
$PWD 
$PWD 
$PWD 
$PWD 
$PWD 
$PWD
$PWD
$VAR
$VAR
$VAR test
$VAR test
$VAR
$VAR test
$VAR test
$VAR test
$VAR test
test$VAR test
test$VAR test
$VAR test
"$VAR test"
test"$VAR test"
$VAR test
test$VAR test
test$VAR test
test$VAR test
test$VAR test
$VAR test
$VAR test
test$VAR test
test$VAR test
test$VARtest
test$VARtest
$PWD
$PWD
$PWD
$PWD
$PWD
$PWD
$PWD
$PWD
$PWD
$PWD
$PWD$PWD
$PWD$PWD
$VAR
$VAR$VAR
$VAR$VAR
$VAR$VAR test
$VAR$VAR test
$VAR$VAR test
$VAR$VAR test
$VAR$VAR test
$PWD$PWD
$PWD$PWD
exi
exi
$PWD$PWD
$PWD$PWD
$PWD$PWD
$PWD$PWD
$PWD$PWD test
test$PWD$PWD test
$PWD$PWD test
test$PWD$PWD test
test$PWD$PWD test
$PWD$PWD test
$PWD$PWD test
$PWD$PWD test
test$PWD$PWD test
test$PWD$PWD test
$PWD$PWD test
$PWD$PWD test
$PWD$PWD test
$PWD$PWD test
$PWD$PWD test
$PWD$PWD test
$PWD$PWD test
$PWD$PWD test
$PWD
$PWD$
$PWD$PWD
$PWD$PWD
$PWD$PWD
$PWD$PWD
test$PWD$PWD
test$PWD$PWD
test$PWD$PWD
test$PWD$PWD
test$PWD$PWD
test$PWD
test$PWD$PWD
test$PWD$PWD
test$PWD$PWD
test$PWD$PWD
test$PWD$PWD
test$PWD$PWD
test$PWD$PWD
test$PWD$PWD
test$PWD$PWD
test$PWD$PWD
test$PWD$PWD
test$PWD$PWD test
aap test$PWD$PWD test
$PS1
eixt
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
$VAR
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "input with var $PS1"
test$PWD$PWD
$VAR
$VAR
$VAR
$VAR
$VAR
$VAR
$VAR
$VAR
$VAR
$VAR
$VAR
$VAR
$VAR
$VAR
$PWD
$PWD
$PWD
$VAR
$VAR
test$PWD$PWD
test$PWD$PWD test
test$PWS$PWS test
$VAR
$VAR
$VAR$PWD
l$VAR
l$VAR
l"$VAR"
l'$VAR'
"$VAR"
"$VAR"
"$VAR"
"$VAR"
"$VAR"
"$VAR"
"$VAR"
"hello world doe je het nog"
"hello world doe je het nog"
"hello world doe je het nog"
"hello world doe je het nog"
"$VAR"
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
"$VAR"
"$VAR"
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
$VAR
$VAR
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello $PS1
"$VAR"
$VAR
'$VAR'
hello "$VAR"
hello "$VAR" there
hello $VAR there
l$VAR there
hello "$VAR" there
hello "$VAR"
hello "$VAR"
hello "$VAR"
hello "$VAR"
hello "$VAR"
hello "$VAR"
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello "$VAR"
hello "$VAR"
hello "$VAR"
hello "$VAR"
hello "$VAR" there
hello "$VAR" there
l$VAR there
l$VAR there
hello "$VAR" there
hello "$VAR"
"hello world out there"
"hello world out there"
"hello world out there"
"hello world out there"
hello "$VAR" there
hello "$VAR" there
"hello world out there"
$VAR there
eit
"hello world out there"
"hello world out there"
"hello world out there"
"hello world out there"
"hello world out there"
"hello world out there"
"hello world out there
"hello world out there"
"hello world out there" this is me
"hello world out there $PWD" this is me
"hello world out there $PWD" this is me
"hello world out there $PWD" this is me
"hello world out there $PWD" this is me
"hello world out there $PWD" this is me
"hello world out there $PWD" this is me
"hello world out there $PWD" this is me"
"hello world out there $PWD" this is me"
"hello world out there $PWD" this is me"
"hello world out there $PWD" this is me"
"hello world out there $PWD" this is me"
"hello world out there $PWD" this is me"
"hello world out there $PWD" this is me"
"hello world out there $PWD" this is me"
"hello world out there $PWD" this is me"
"hello world out there $PWD" this is me"
"hello world out there $PWD" this is me"
"hello world out there $PWD" this is me"
"hello world out there $PWD" this is me"
"hello world out there $PWD" this is me"
"hello world out there $PWD" this is me"
"hello world out there $PWD" this is me"
"hello world out there $PWD" this is me
"hello world out there $PWD" this is me
"hello world out there" this is me
"hello world out there" this is me
"hello world out there" this is me
"hello world out there" this is me
"hello world out there" this is me
"hello world out there" this is me
"hello world out there" this is me
"hello world out there" this is me
"hello world out there" this is me
"hello world out there" this is me
"hello world out there" this is me
"hello world out there" this is me"
"hello world out there" this is me"
"hello world out there" this is me
"hello world out $PWD there" this is me
'hello world out $PWD there' this is me
'hello world out $PWD there' this is me
"hello world out there"
'hello world out there'
'hello world out $VAR there'
'hello world out $VAR there'
'hello world out $VAR there'
"hello world out $VAR there"
"hello world out $VAR there"
'hello world out $VAR there'
'hello world out $VAR there'
$VAR
"$VAR"
"$VAR"
'$VAR'
'$VAR'
"$VAR"
'$VAR'
"$VAR"
"hello world"
"hello world"
'hello world'
'hello world'
'hello'
'hello'
"hello"
"hello"
"hello"
"hello"
"hello"
"hello"
"hello"
'hello'
"$VAR"
'$VAR'
"$VAR"
'$VAR'
'$VAR'
'$VAR'
"$VAR"
make fclean
"$VAR"
'$VAR'
"$VAR"
'$VAR'
< '$VAR'
< "hello"
"$VAR"
'$VAR'
'$VAR'
'$VAR'
make
'$VAR'
"$VAR"
"$VAR"
"$VAR"
"$VAR"
EXIT
"$VAR"
"$VAR"
'$VAR'
'$VAR'
"$VAR"
"$PS1"
'$PS1'
"$VAR"
"$PS1"
"hello world" this is a pain
"hello world" this is a pain
"hello world"
"hello"
"hello world"
"hello world"
"hello"
"hello"
"hello world"
"hello world"
"hello"
"hello"
"hello"
"hello world"
"hello world"
"hello world"
"hello world"
"hello world"
"hello world"
"hello world"
"hello world"
"hello world"
"$VAR"
< "$VAR"
"$VAR"
"hello world"
"hello"
"hello world" this is a pain
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello "$PS1"
make fclean
hello "$PS1"
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
$PS1 app
$PWD app
EXIT
< in > out << here >> append
< $aap
< $aap
$aap noot mies
$aap noot mies
< $aap
hello $aap noot mies
hello $aap noot mies
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone"
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PWD and #comment that will be gone
$PS1
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PWD and #comment that will be gone
$PS1
$PS1 aap
$PS1aap
$2VAR
$2VAR
$2VAR
$2VAR
$2VAR
$VAR
$2VAR
$PS2
$VAR
$2VAR
$PS2
$PS1
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS and #comment that will be gone
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS and #comment that will be gone
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone
$PS1
$PS1
$PS1
$PS1
$PS1
$PS1
$PS1
test$PWD
test$PWD
$PS1
$2VAR
$VAR
$2VAR
$PS1
'$PS1'
"$PS1"
$VAR
'$VAR'
"$VAR"
"$PS1"
'$PS1'
$PS1
$PS1
$PS1
$PS1
$PS1
$PS1
$PS1
$PS1
$PS1
$PS1
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gon
$PS1
$PS1
$PS1
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone
$PS1
"$PS1"
< input for command 1 | << here for heredoc > out | >> append the last
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
"input with var $PS1"
"here with var $PWD"
"input with var $PS1" for command 1 | "here with var $PWD" for heredoc out | append the last
"input with var $PS1" for command 1 | "here with var $PWD" for heredoc out | append the last
"input with var $PS1" for command 1 | "here with var $PWD" for heredoc out | append the last
"input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
"here with var $PWD"
"input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
$PS1
$PS1
$PS1
$PS1
$PS1
"input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
"input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
"here with var $PWD"
"input with var $PS1" for command 1 | "here with var $PWD" for heredoc out | append the last
"input with var $PS1" for command 1 | "here with var $PWD" for heredoc out | append the last
"input with var $PS1" for command 1 | "here with var $PWD" for heredoc out | append the last
< "input with var $PS1" for command 1 | "here with var $PWD" for heredoc out | append the last
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "input with var $PS1" for command 1
<"input with var $PS1" for command 1
<"input with var $PS1" for command 1
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "input with var $PWD" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "input with var $PWD" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
#only a comment?
# only a comment?
 # only a comment?
< "input with var $PWD" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "input with var $PWD" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "input with var $PWD" for command 1
< "input with var $PWD" for command 1
< "input with var $PWD" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
# only a comment?
<"input with var $PS1" for command 1
"input with var $PS1" for command 1 | "here with var $PWD" for heredoc out | append the last
<< $PWD
<<$PWD
<< $PWD
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone
command | another $command |
command | another $command |
|
hello world |
command | another command |
command | another $command |
$aap
$aap
$aap
command | another $command |
command | another $PS1 | here
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
command | another $command |
|
#comment
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
| followed by command
< "input with var $PS1" for command 1
< "input with var $PS1" for command 1
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "input with var $PS1" for c< "input with var $PS1" for command 1
< "input with var $PS1" for command 1
< "input with var $PS1" for command 1 | < "input with var $PS1" for command 1
<< here
<< "here with var $PWD" for heredoc
<< "here with var $PWD" for heredoc
<< "here with var $PWD" for heredoc
< "input with var $PS1" for command 1 | < "input with var $PS1" for command 1
< "input with var $PS1" for command 1 | < "input with var $PS1" for command 1
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "input with var $PS1" for command 1 | < "input with var $PS1" for command 1
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
<< here
<< "here with var $PWD" 
<< "here with var $PWD" 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
< input for command 1 | << here for heredoc > out | >> append the last
<input
< input
<< here
<< here
<< here
<< here
<< here
<< here
< input
exut
< input
< input for command 1 | << here for heredoc > out | >> append the last
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
<< $PWD
<< "$PWD"
"$PWD"
<< "something in quotes"
< #comment
< #comment
< #comment
< #comment
> "output with quotes"
> "output with quotes"
< inpu < "input with quotes" < 'input with quotes' < "input with $PWD" << input with $PWD'
< inpu < "input with quotes" < 'input with quotes' < "input with $PWD" << input with $PWD'
< inpu < "input with quotes" < 'input with quotes' <"input with $PWD" <<input with $PWD'
"something in quotes"
"something in quotes $PWD"
'something in quotes $PWD'
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
$aap
command | another $command |
< input for command 1 | << here for heredoc > out | >> append the last
< in <in
< in < in >ou
< in < in >out
<"PS1"
<"PS1 and out"
<< in
<"$PS1 and out"
<'$PS1 and out'
<< in
<< $in
>> $in
> $in
<< $PWD
< $PWD
>> $PWD
<< '$PWD'
<< "$PWD"
<< $PWD
<< "$PWD"
< "$PWD"
"$PWD"
<< "$PWD"
'$PWD'
<< "$PWD"
'$PWD'
"$PWD"
< "$PWD"
<< "$PWD"
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
<< "$PWD"
<< '$PWD'
<< '$PWD  hello'
<< '$PWD  hello'
<< "$PWD"
<< "$PWD"
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
<< "$PWD"
<< "$PWD"
<< "$PWD"
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
command | another $command |
#comment
< input for command 1 | << here for heredoc > out | >> append the last
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< input for command 1 | << here for heredoc > out | >> append the last
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< $var < "$var" < '$var' << $var << "$var" << '$var'
< $var < "$var" < '$var' << $var << "$var" << '$var'
< $var
< $VAR
$VAR
< $VAR
< "$VAR"
< '$VAR'
<< $VAR
<< "$VAR"
<< '$VAR'
<< '$VAR'
<< "$VAR"
<< "in a string $VAR"
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
<< "here with var $PWD"
<< "here with var $PWD" for heredoc > out
for heredoc > out
<< "$PWD" for heredoc > out
< in > out
< "in" > "out"
< "in"
< "in" 
"in" 
"in" out
$VAR
$PS1
< "in" > "out"
< "in" > "out"
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
command | another $command |
#comment
< input for command 1 | << here for heredoc > out | >> append the last
< $var 
< "$var" 
< '$var' 
<< $var 
<< "$var" 
<< '$var'
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
command | another $command |
#comment
< input for command 1 | << here for heredoc > out | >> append the last
< $var 
< "$var" 
< '$var' 
<< $var 
<< "$var" 
<< '$var'
< input for command 1 | << here for heredoc > out | >> append the last
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
|
|
command | command |
command |
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
command | another $command |
#comment
< input for command 1 | << here for heredoc > out | >> append the last
< $var 
< "$var" 
< '$var' 
<< $var 
<< "$var" 
<< '$var'
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
command | another $command |
#comment
< input for command 1 | << here for heredoc > out | >> append the last
< $var 
< "$var" 
< '$var' 
<< $var 
<< "$var" 
<< '$var'
command | another $command |
command | another $command |
command | another $command |
command | another $command |
command | another $command |
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
command | another $command |
#comment
< input for command 1 | << here for heredoc > out | >> append the last
< $var 
< "$var" 
< '$var' 
<< $var 
<< "$var" 
<< '$var'
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
command | another $command |
#comment
< input for command 1 | << here for heredoc > out | >> append the last
< $var 
< "$var" 
< '$var' 
<< $var 
<< "$var" 
<< '$var'
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
		printf("state pipe: %d\n", state);
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
#comment
#comment
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
command | another $command |
#comment
< input for command 1 | << here for heredoc > out | >> append the last
< $var 
< "$var" 
< '$var' 
<< $var 
<< "$var" 
<< '$var'
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
command | another $command |
#comment
#comment
command | another $command |
command | another $command |
command | another $command |
command | another $command |
command | another $command |
command | another $command |
command | another $command |
command | another $command |
command | another $command |
exit 
command | another $command |
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
command | another $command |
command | another $command |
command | another $command |
command | another $command |
command | another $command |
command | another $command |
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
|
| followed by command
command | another $command |
command | another $command |
command | another $command |
command | another $command |
command | another $command |
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
command | another $command |
#comment
command | another $command |
command | another $command |
command | another $command |
command | another $command |
command | another $command |
command | another $command |
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
command | another $command |
#comment
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
command | another $command |
#comment
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
command | another $command |
#comment
command | another $command |
command | another $command
command | another $command |
command | another $command |
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
command | another $command |
#comment
< input for command 1 | << here for heredoc > out | >> append the last
< $var 
< "$var" 
< '$var' 
<< $var 
<< "$var" 
<< '$var'
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
command | another $command |
#comment
< input for command 1 | << here for heredoc > out | >> append the last
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
command | another $command |
#comment
< input for command 1 | << here for heredoc > out | >> append the last
< $var 
< "$var" 
< '$var' 
<< $var 
<< "$var" 
<< '$var'
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
command | another $command |
#comment
< input for command 1 | << here for heredoc > out | >> append the last
< $var 
< "$var" 
< '$var' 
<< $var 
<< "$var" 
<< '$var'
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
command | another $command |
#comment
< input for command 1 | << here for heredoc > out | >> append the last
< $var 
< "$var" 
< '$var' 
<< $var 
<< "$var" 
<< '$var'
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
command | another $command |
#comment
< input for command 1 | << here for heredoc > out | >> append the last
< $var 
< "$var" 
< '$var' 
<< $var 
<< "$var" 
<< '$var'
< "in" > "out"
$PS1
$PS1
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
| followed by command
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command |
#comment
#comment
| followed by command |
| followed by command |
| followed by command |
#comment
#comment
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
command | another $command |
#comment
< input for command 1 | << here for heredoc > out | >> append the last
< $var 
< "$var" 
< '$var' 
<< $var 
<< "$var" 
<< '$var'
command | command 2 |
command | command 2 |
command | command 2 |
command | command 2 |
command | command 2 |
		printf("state cmd: %d\n", state);
command | command 2 |
command | command 2 |
command | command 2 |
command | command 2 |
#command
#command
command | command 2 |
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
| followed by command
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
< in > out
<in >out
<in>out
< "in" > out
"in" "out"
"in" "out"
< "in" > out
< "in" > out
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
command | another $command |
#comment
< "in" > out
< "in" > out
ecit
< "in" > out
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
command | another $command |
#comment
< input for command 1 | << here for heredoc > out | >> append the last
< $var 
< "$var" 
< '$var' 
<< $var 
<< "$var" 
<< '$var'
<< '$var'
<< '$var'
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
command | another $command |
#comment
< input for command 1 | << here for heredoc > out | >> append the last
< $var 
< "$var" 
< '$var' 
<< $var 
<< "$var" 
<< '$var'
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
< "in" > out
< "in" > out
$PS1
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
command | another $command |
#comment
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
<"in" >out
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
command | another $command |
#comment
< input for command 1 | << here for heredoc > out | >> append the last
< $var 
< "$var" 
< '$var' 
<< $var 
<< "$var" 
<< '$var'
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "in" > "out"
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "in" > "out"
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
command | another $command |
#comment
< input for command 1 | << here for heredoc > out | >> append the last
< $var 
< "$var" 
< '$var' 
<< $var 
<< "$var" 
<< '$var'
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "in" > "out"
command | another $command |
#comment
command | another $command |
#comment
command | another $command |
#comment
command | another $command |
#comment
command | another $command |
#comment
command | another $command |
#comment
			// printf("here3\n");
command | another $command |
#comment
command | another $command |
#comment
#comment
	pipe->pipe_argv = NULL;
command | another $command |
#comment
command | another $command |
#comment
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
command | another $command |
#comment
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
command | another $command |
#comment
< input for command 1 | << here for heredoc > out | >> append the last
< $var 
< "$var" 
< '$var' 
<< $var 
<< "$var" 
<< '$var'
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "in" > "out"
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "in" > "out"
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
command | another $command |
#comment
< input for command 1 | << here for heredoc > out | >> append the last
< $var 
< "$var" 
< '$var' 
<< $var 
<< "$var" 
<< '$var'
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "in" > "out"
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "in" > "out"
<< '$var'
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "in" > "out"
<< "$var" 
<< '$var'
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "in" > "out"
< $var 
< "$var" 
< '$var' 
<< $var 
<< "$var" 
<< '$var'
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "in" > "out"
< '$var' 
<< $var 
<< "$var" 
<< '$var'
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "in" > "out"
< "$var" 
< '$var' 
<< $var 
<< "$var" 
<< '$var'
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "in" > "out"
< "$var" 
< '$var' 
< "$var" 
< '$var' 
<< "$var" 
< "$var" 
< "$var" 
< "$var" 
< "$var" 
< "$var" 
< "$var" 
< "$var" 
< "$var" 
< "$var" 
< "$var" 
< "$var" 
< "$var" 
< "$var" 
< "$var" 
< "$var" 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
command | another $command |
#comment
< input for command 1 | << here for heredoc > out | >> append the last
< $var 
< "$var" 
< '$var' 
<< $var 
<< "$var" 
<< '$var'
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "in" > "out"
< "in" > "out"
$var
"$var"
< $var
< "$var"
< "$var"
"$var"
< "$var"
< "$var"
< "$var"
"$var"
"$var"
"$var"
exjt
"$var"
"$var"
< "$var"
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
command | another $command |
#comment
< input for command 1 | << here for heredoc > out | >> append the last
< $var 
< "$var" 
< '$var' 
<< $var 
<< "$var" 
<< '$var'
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "in" > "out"
command | command 2|
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
command | another $command |
#comment
< input for command 1 | << here for heredoc > out | >> append the last
< $var 
< "$var" 
< '$var' 
<< $var 
<< "$var" 
<< '$var'
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "in" > "out"
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
command | another $command |
#comment
< input for command 1 | << here for heredoc > out | >> append the last
< $var 
< "$var" 
< '$var' 
<< $var 
<< "$var" 
<< '$var'
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "in" > "out"
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
command | another $command |
#comment
< input for command 1 | << here for heredoc > out | >> append the last
< $var 
< "$var" 
< '$var' 
<< $var 
<< "$var" 
<< '$var'
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "in" > "out"
< "in" > "out"
< "in" > "out"
< $var 
< "$var" 
< '$var' 
<< $var 
<< "$var" 
<< '$var'
< $var 
< $var 
< $var 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
command | another $command |
#comment
< input for command 1 | << here for heredoc > out | >> append the last
< $var 
< "$var" 
< '$var' 
<< $var 
<< "$var" 
<< '$var'
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "in" > "out"
< "in" > "out"
<$var
<"$var"
< $var 
< "$var"
< "$var"
< $var 
< $var 
< "$var" 
< "$var" 
< "$var" 
< "$var" 
< "$var" >out
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
command | another $command |
#comment
< input for command 1 | << here for heredoc > out | >> append the last
< $var 
< "$var" 
< '$var' 
<< $var 
<< "$var" 
<< '$var'
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "in" > "out"
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
command | another $command |
#comment
< input for command 1 | << here for heredoc > out | >> append the last
< $var 
< "$var" 
< '$var' 
<< $var 
<< "$var" 
<< '$var'
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "in" > "out"
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
command | another $command |
#comment
< input for command 1 | << here for heredoc > out | >> append the last
< $var 
< "$var" 
< '$var' 
<< $var 
<< "$var" 
<< '$var'
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "in" > "out"
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
command | another $command |
#comment
< input for command 1 | << here for heredoc > out | >> append the last
< $var 
< "$var" 
< '$var' 
<< $var 
<< "$var" 
<< '$var'
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "in" > "out"
t_list		*init_pipelist(void);
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
command | another $command |
#comment
< input for command 1 | << here for heredoc > out | >> append the last
< $var 
< "$var" 
< '$var' 
<< $var 
<< "$var" 
<< '$var'
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "in" > "out"
| followed by command
|
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
command | another $command |
#comment
< input for command 1 | << here for heredoc > out | >> append the last
< $var 
< "$var" 
< '$var' 
<< $var 
<< "$var" 
<< '$var'
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "in" > "out"
""
hello
""
hello
$aap
empty var
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
command | another $command |
#comment
< input for command 1 | << here for heredoc > out | >> append the last
< $var 
< "$var" 
< '$var' 
<< $var 
<< "$var" 
<< '$var'
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "in" > "out"
/* Working correctly */
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
command | another $command |
#comment
HELLO
HELLO
hello
hello
hello
hello
hello world 'does | this work?' hello=10 $PWD word
hello world does | this work? hello=10 $PWD word
hello world 'does | this work?' 
hello world 'does | this work?' hello=10 
hello world 'does | this work?' hello=10 $PWD
hello world 'does | this work?' hello=10  word 
hello world 'does | this work?' hello=10 word | word "#comment not gone" 
lsgj exit
lsgj exit
exit
exit
exit
exit
exit
exit
hello
lskdg aldg a;o osigh l
exit
exit
exit
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
command | another $command |
#comment
< input for command 1 | << here for heredoc > out | >> append the last
< $var 
< "$var" 
< '$var' 
<< $var 
<< "$var" 
<< '$var'
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "in" > "out"
exit
exit
exit
$PWD
exit
$PWD
exit
$PWDtest
exit
$PWD
$PWDtest
test$PWD
test$PWD
$PWDtest
exit
$PWDtest
test$PWD
test$PWD
test$PWD
test$PWD
test$PWD
test$PWD
test$PWD
test$PWD
test$PWD
test$PWD
test$PWD
test$PWD
test$PWD
exit
test$PWD
exit
hello
exit
hello
exit
hello
exit
$PWD
exit
$PWDtest
exit
test$PWD
exit
test$PWD
exit
test$PWD
exit
test$PWD
exit
test$PWDa
exit
$PWDtest
exit
test$PWD
exit
test$PWD
exit
test$PWD
exit
test$PWD
test$PWD
exit
test$PWD
$PWD
$PWD
exit
test$PWD
exit
$PWD$PWD
exit
test$PWD
exit
test$PWD
exit
test$PWD
exit
test$PWD
exit
#comment
exit
test #comment
exit
$PWD
exit
$PWD
exit
$PWD
exit
exit
$PWD
exit
$PWD
exit
$PWD
exit
$PWD
exit
$PWD
exit
$PWD
exit
$PWD
exit
$PWD
exit
$PWD
test$PWD
$PWDtest
exit
$PWDtest
exit
$PWDtest
exit
test$PWD
exit
test$PWD
exit
test$PWD
exit
test$PWD
exit
test$PWD
exit
test$PWD
exit
test$PWD test
test$PWDtest
exit
test$PWDtest
exit
test$PWD
exit
test$PWD
exit
test$PWD
exit
test$PWD
exit
test$PWD
exit
test$PWD
exit
test$PWD
exit
test$PWD
exit
test$PWD
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
exit
test$PWD
exit
test$PWD
exit
test$PWD
exit
test$PWD
exit
test$PWD
exit
$PWD
exit
$PWD
exit
test$PWD
exit
test$PWD
exit
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
exit
$PWDtest
test$PWD
exit
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
exit
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
exit
| followed by command
exit
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
exit
| followed by command
exit
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
exit
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
exit
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
followed by command
exit
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
exit
hello | command
and command
and another
exit
hello | command
and command
and another
exit
< $var 
exit
< "$var"
exit
< "in" > "out"
exit
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
exit
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
exit
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
exit
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
exit
$PWD
$PWDtest
$PWD test
exit
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
exit
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
exit
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
command | another $command |
#comment
< input for command 1 | << here for heredoc > out | >> append the last
< $var 
< "$var" 
< '$var' 
<< $var 
<< "$var" 
<< '$var'
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "in" > "out"
$PWDtest
test$PWD
exit
test$PWD
exit
test$PWD
test$PWD
test$PWD
$PS1
exit
$PS1
exit
$PS1
exit
$PS1
exit
$PS1
exit
$PS1
exit
$PS1
exti
exit
$PS1
exit
$PS1
exit
$PS1
exit
$PS1
exit
$PS1
exit
$PS1
exit
$PS1
exit
$PS1
exit
$PS1
exit
$PS1
exit
$PS1
exit
$PS1
exit
$PS1
exit
$PS1
exit
$PS1
exit
$PWD
$PS1
exit
$PS1
exit
$PS1
exit
$PS1
exit
$PS1
exit
$PS1
exit
$PS1
exit
$PS1
exit
$PS1
exit
$PS1
exit
$PS1
exit
$PS1
exit
$PS1
exit
$PS1
exit
$PS1
exit
$PS1
exit
$PS1
exit
$PS1
exit
$PS1
exit
$PS1
exit
$PS1
exit
$PS1
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
command | another $command |
#comment
< input for command 1 | << here for heredoc > out | >> append the last
< $var 
< "$var" 
< '$var' 
<< $var 
<< "$var" 
<< '$var'
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "in" > "out"
$PWDtest
test$PWD
exit
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
command | another $command |
#comment
< input for command 1 | << here for heredoc > out | >> append the last
< $var 
< "$var" 
< '$var' 
<< $var 
<< "$var" 
<< '$var'
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "in" > "out"
$PWDtest
test$PWD
exit
$var
"$var"
< "$var"
< $var
exit
< $var
$var
< "$var"
$var
< "$var"
$var
< "$var"
< "$var"
$var
exit
$var
exit
$var
"$var"
< "$var"
< "$var"
"$var"
$var
$var
$var
"$var"
< "$var"
< $var
< '$var'
exit
< "$var"
< "$var"
< '$var'
$var
'$var'
< $var
< '$var'
make
make
exit
< '$var'
exit
< '$var'
exit
< '$var'
exit
< '$var'
exit
< '$var'
exit
< '$var'
< '$var'
exit
< '$var'
< "$var"
<< "$var"
exit
<< "$var"
< '$var'
'$var'
"$var"
< "$var"
<< "$var"
exit
<< "$var"
< "$var"
< '$var'
'$var'
exit
'$var'
< '$var'
exit
< '$var'
< "$var"
< "$var"
< '$var'
exit
exit
< "$var"
< '$var'
exit
< '$var'
exit
< '$var'
exit
< '$var'
exit
< '$var'
exit
< '$var'
exit
< '$var'
exit
< '$var'
exit
< '$var'
< "$var"
exit
< "$var"
< '$var'
exit
< '$var'
make
exit
< '$var'
< "$var"
"$var"
$var
'$var'
< $var
< '$var'
< "$var"
exit
< "$var"
exit
< "$var"
"$var"
exit
"$var"
exit
"$var"
exit
"$var"
exit
exit
"$var"
exit
"$var"
make
"$var"
exit
"$var"
exit
"$var"
'$var'
< '$var'
< "$var"
< "$var"
< "$var"
< "$var"
< "$var"
< "$var"
< "$var"
< "$var"
make
< "$var"
exit
< "$var"
< "$var"
exit
< "$var"
"$var"
"$var hello"
"$var hello"
"hello $var hello"
"$var hello"
exit
"$var hello"
exit
"$var hello"
exit
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< input
< input
< input
< input
exit
exit
< input
> input
<< input
>> input
exit
exit
>> input
<< input
exit
<< input
< "input"
< 'input'
<< "input"
<< "$input"
exit
<< "$input"
< 'input'
'$input'
exit
<
< #comment
< #comment input
exit
exit
> >
exit
> >
exit
> >
'$input'
"$input"
< "$input"
<< "$input"
>> "$input"
>> '$input'
"hello world is this still working?"
'hello world is this still working?'
'hello world is this still $working?'
'$working?'
"$PWD working?"
'$PWD working?'
'test $PWD working?'
exit
'test $PWD working?'
< "$var"
exit
< "$var"
exit
< "$var"
'test $PWD working?'
'test $PWD working?'
'$PWD'
'test $PWD working?'
'test $PWD working?'
'$PWD'
exit
'test $PWD working?'
exit
'test $PWD working?'
exit
'test $PWD working?'
exit
'test $PWD working?'
exit
'test $PWD working?'
exit
'test $PWD working?'
exit
'test $PWD working?'
exit
'test $PWD working?'
exit
'test $PWD working?'
exit
'test $PWD working?'
exit
'test $PWD working?'
exit
'test $PWD working?'
exit
'test $PWD working?'
exit
'test $PWD working?'
exit
'test $PWD working?'
exit
'test $PWD working?'
exit
'test $PWD working?'
'test $PWD working?'
'test $PWD working?'
'test $PWD working?'
"test $PWD working?"
exit
		print_tokens(*token, "remove quotes");
'hello $PWD world'
< 'hello $PWD world'
<< 'hello $PWD world'
exit
<< 'hello $PWD world'
'hello $PWD world'
"hello $PWD world"
<< "hello $PWD world"
< $var 
< "$var" 
< "$var" 
< "$var" 
"$var" 
"$var" 
"$var" 
"$var" 
"$var" 
exit
exit
"$var" 
"$var" 
<< "$var" 
"hello world"
"hello $var world"
'hello $var world'
< $var 
< "$var"
< '$var'
<< $var 
<< "$var" 
<< '$var'
$var
'$var'
"$var"
"$var"
"$VAR"
$VAR
exit
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
command | another $command |
#comment
< input for command 1 | << here for heredoc > out | >> append the last
< $var 
< "$var" 
< '$var' 
<< $var 
<< "$var" 
<< '$var'
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "in" > "out"
$PWDtest
test$PWD
exit
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
exit
hello world 'does | this work?' hello=10 
exit
hello world 'does | this work?' hello=10 $PWD word
exit
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" 
exit
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
exit
< $var 
< "$var" 
< '$var' 
exit
|
command | another $command |
#comment
exit
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
exit
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
exit
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 an
exit
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with
exit
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with
exit
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 an
exit
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
command | another $command |
#comment
< input for command 1 | << here for heredoc > out | >> append the last
< $var 
< "$var" 
< '$var' 
<< $var 
<< "$var" 
<< '$var'
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "in" > "out"
$PWDtest
test$PWD
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 an
exit
$PS1
exit
$PS1
exit
$PS1
exit
$PS1
exit
$PS1
exit
$VAR
$VAR 
 $VAR 
$PS1
exit
$PS1
exit
$PS1
exit
$PS1
exit
$PS1
exit
$VAR
exit
exit
$PS1
exit
$PS1
exit
$PS1
exit
$PS1
exit
$PS1
exit
$PS1
exit
$PS1
exit
$PS1
exit
$PS1
exit
$PS1
exit
$VAR
exit
$VAR
$PS1
exit
$PS1
exit
< $var
< "$var"
< $var
exit
< $var
exit
< $var
< $var
exit
< $var
exit
$PS1
exit
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
command | another $command |
#comment
< input for command 1 | << here for heredoc > out | >> append the last
< $var 
< "$var" 
< '$var' 
<< $var 
<< "$var" 
<< '$var'
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "in" > "out"
$PWDtest
test$PWD
$PS1
exit
command | another $command |
#comment
< input for command 1 | << here for heredoc > out | >> append the last
< $var 
< "$var" 
< '$var' 
<< $var 
<< "$var" 
<< '$var'
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "in" > "out"
$PWDtest
test$PWD
~
~/
< ~/
exit
< ~/
~/
exit
~/
~
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
command | another $command |
#comment
< input for command 1 | << here for heredoc > out | >> append the last
< $var 
< "$var" 
< '$var' 
<< $var 
<< "$var" 
<< '$var'
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "in" > "out"
$PWDtest
test$PWD
exit
test$PWD
exit
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
command | another $command |
#comment
< input for command 1 | << here for heredoc > out | >> append the last
< $var 
< "$var" 
< '$var' 
<< $var 
<< "$var" 
<< '$var'
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "in" > "out"
$PWDtest
test$PWD
exit
		i++;
command | another $command |
#comment
< input for command 1 | << here for heredoc > out | >> append the last
< $var 
< "$var" 
< '$var' 
<< $var 
<< "$var" 
<< '$var'
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "in" > "out"
$PWDtest
test$PWD
~/
~
~a
exit
~
~/
exit
~/
exit
exit
~/
exit
~/
exit
~/
exit
~/
exit
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
command | another $command |
#comment
< input for command 1 | << here for heredoc > out | >> append the last
< $var 
< "$var" 
< '$var' 
<< $var 
<< "$var" 
<< '$var'
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "in" > "out"
$PWDtest
test$PWD
exit
~withnoslash
~
~/hello
exit
$PWD
test$PWD
exit
test$PWD
exit
test$PWD
exit
test$PWD
$PWD
exit
$PWD
test$PWD
exit
test$PWD
exit
test$PWD
exit
test$PWD
exit
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
exit
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
test$PWD
hello world 'does | this work?'
exit
hello world 'does | this work?'
test$PWD
exit
test$PWD
hello world 'does | this work?'
exit
hello world 'does | this work?'
exit
hello world 'does | this work?'
exit
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
command | another $command |
#comment
< input for command 1 | << here for heredoc > out | >> append the last
< $var 
< "$var" 
< '$var' 
<< $var 
<< "$var" 
<< '$var'
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "in" > "out"
$PWDtest
test$PWD
~withnoslash
~
~/hello
hello world 'does | this work?'
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
hello world 'does | this work?'
hello world 'does | this work?'
exit
hello world 'does | this work?'
hello world 'does | this work?'
test$pwd
test$PWD
exit
test$PWD
test$pwd
exit
test$pwd
test$pwd
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
command | another $command |
#comment
< input for command 1 | << here for heredoc > out | >> append the last
< $var 
< "$var" 
< '$var' 
<< $var 
<< "$var" 
<< '$var'
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "in" > "out"
$PWDtest
test$PWD
~withnoslash
~
~/hello
<< $var 
exit
<< $var 
exit
<< $var 
exit
"  \"hoi\"  xx'd  x  \" dag kaas"
"  \"hoi\"  xx'd  x  \" dag kaas"
exit
jdfjfgj gfgjgj
echo "hello'hi'lol"
echo $USER
ls "                                   -la"
ls                                    -la"
ls                                    -la
ls                                | ls|ls
ls                                | ls -la|ls
jfjgjg hello
ls > fjg
ls >>>>>> fjg
ls ?? fjg
~
~/pwd
~/a
~a
< $PWD
<< $PWD
< $PWD
<< $PWD
ls | exit
efjgfgjggjfg
jkfgjjegrkg
exit
export a=jgjgj 123=jfgjgj c=jgjgkj
var=a
exit
$PS1
exit
"hello world"
"hello ' world"
exit
"hello $PWD world"
'hello $PWD world'
'hello $PWD ''world'
exit
'hello $PWD ''world'
'hello $PWD ''world'[B
exit
"hello ' world"
exit
"hello ' world"
exit
"hello ' world"
exit
"hello ' world"
exit
"hello ' world"
exit
"hello ' world"
"hello '$PWD world"
exit
"hello $PWD world"
exit
"hello $PWD world"
"hello '$PWD world"
exit
"hello '$PWD world"
exit
"hello '$PWD world"
exit
"hello '$PWD world"
"hello $PWD world"
exit
"hello $PWD world"
"hello '$PWD world"
exit
"hello '$PWD world"
exit
"hello '$PWD world"
"hello $PWD world"
"hello $PWD world"
exit
"hello $PWD world"
"hello '$PWD world"
exit
"hello '$PWD world"
exit
"hello '$PWD world"
exit
"hello '$PWD world"
exit
"hello '$PWD world"
"'hello $PWD world"
exit
"'hello $PWD world"
"hello '$PWD world"
exit
"hello '$PWD world"
exit
"hello '$PWD world"
exit
"hello '$PWD world"
exit
"hello '$PWD world"
<< $pwd
<< $PWD
< $PWD
< "$PWD"
< "'$PWD'"
exit
< "'$PWD'"
exit
< "'$PWD'"
exit
< "'$PWD'"
exit
< "'$PWD'"
< $var 
< "$var" 
< '$var' 
exit
< '$var' 
exit
< '$var' 
exit
< '$var' 
< $var 
< "$var" 
< '$var' 
<< $var
<< "$var" 
<< '$var'
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
exit
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
exit
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
exit
<< hello
<< "hello"
exit
<< hello
<< "hello"
<< 'hello'
exit
hello world 'does | this work?' hello=10 $PWD word | word "#comment not gone" | with $PS1 and #comment that will be gone 
| followed by command
|
command | another $command |
#comment
< input for command 1 | << here for heredoc > out | >> append the last
< $var 
< "$var" 
< '$var' 
<< $var
<< "$var" 
<< '$var'
< "input with var $PS1" for command 1 | << "here with var $PWD" for heredoc > out | >> append the last
< "in" > "out"
$PWDtest
test$PWD
~withnoslash
~
~/hello
exit
"hello ' world"
'hello " world'
exit
"hello ' world"
"hello ' world"
exit
ls
ls
exit
ls | cat
ls | grep Make
ls | grep Make
ls
ls
la
ls
ls
exit
ls -la
exit
ls | grep Make | cat
ls -la
exit
hello
ls
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
TEST in child
ls | grep make
ls | grep make
ls
exit
ls
exit
ls
exit
exit
ls
exit
ls
ls
ls | grep Make
la -la
ls -la
exit
cat test.c
cat src/test.c
head src/print.c
ls | grep make
exit
ls | grep Make
ls | cat include/executor.h 
exit
ls | cat include/executor.h 
ls
exit
l
ls
exit
ls
ls | ls
exit
ls
ls | ls
exit
ls
ls
ls
ls
ls
ls
ls
ls | ls
exit
ls | ls
ls | ls
exit
ls | ls
exit
ls | ls
exit
ls | ls
exit
ls
ls | ls
exit
ls
exit
ls
exit
ls
ls | ;s
ls | ;s
ls | ls
exit
ls
ls | ls
exit
ls
ls | ls
ls
ls | ls
ls | ls | ls | ls
exit
ls | ls | ls | ls
ls
ls
exit
ls
ls | ls | ls | ls
ls | ls | ls | 
ls | ls | ls | ls
exit
ls
ls | ls | ls | ls 
exit
ls | ls | ls | ls 
exit
ls
exit
ls
ls | ls | ls | ls
exit
ls | ls | ls | ls
exit
ls
ls | ls | ls | ls | ls
exit
ls | ls | ls | ls | ls
ls
ls | ls | ls | ls
ls | grep Make
exit
ls | grep Make
exit
ls
ls | grep
ls | grep Make
exit
grep Makefile
make
exit
grep Makefile
exit
grep Makefile
exit
grep Makefile
exit
grep Makefile
exit
grep Makefile
et
e
ake
ls
cat segfault.txt 
cat segfault.txt 
exit
ls | grep Makefile
exit
ls | grep Makefile
ls
ls | grep
ls | grep Make
exit
ls
ls | grep Make
ls | ls
exit
ls
ls
LS
ls | grep Make
exit
ls | grep Make
xi
ls
ls | grep Make
ls
exit
ls | cat
x
exit
ls
ls | grep Make
exit
ls | grep Make
exit
ls | ls
ls | ls
ls | ls
ls | wc -1
ls | wc -l
exit
ls | wc -l
exit
ls | wc -l
exit
lls
ls
exit
ls
ls | ls
ls | grep Make
ls
ls | ls | ls
exit
ls | ls | ls
exit
ls | ls | ls
exit
ls | ls | ls
exit
ls | ls | ls
exit
ls | ls | ls
exit
ls | ls | ls
ls
exit
ls | ls | ls
exit
ls | ls | ls
ls
eixt
exit
ls
exit
ls
exit
ls
exit
ls
exit
ls
ls | ls
exit
ls | ls
ls | ls
ls
exit
ls | ls
eixt
exit
ls
ls
exit
ls
ls
exit
ls
ls
ls
ls
ls
ls
exit
ls | ls
exit
ls
ls | ls
exit
ls | ls
exit
ls | ls
exit
ls | ls
exit
ls
exit
ls | ls
le
ls
exit
ls
ls
ls
exit
ls
exit
ls
ls | ls
ls -a
exit
ls
ls
ls
exit
ls
exit
ls
ls -la
ls | grep Make
exit
